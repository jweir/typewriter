# typed: true
# frozen_string_literal: true

module Typewriter
  class Template
    JOIN_ERROR = T.let(T.unsafe(nil), String)

    include Typewriter::Writer
    include Typewriter::SpecElements::HTMLAllElements

    sig { params(block: T.proc.params(arg0: T.attached_class).void).returns(T.attached_class) }
    def self.start(&block); end

    sig { params(templates: T::Array[Typewriter::Writer]).returns(T.self_type) }
    def join(templates); end

    sig do
      params(blk: T.nilable(T.proc.params(arg0: Typewriter::Attribute).void)).returns(Typewriter::Attribute)
    end
    def attr(&blk); end

    sig { params(value: String).returns(T.self_type) }
    def text(value); end

    sig { returns(T.self_type) }
    def doctype; end

    sig do
      params(attributes: T.nilable(Typewriter::Attribute),
             block: T.proc.returns(String)).returns(T.self_type)
    end
    def script(attributes, &block); end

    sig { params(comment_text: T.nilable(String)).returns(T.self_type) }
    def comment(comment_text = nil); end
  end

  module Writer
    sig { void }
    def initialize
      @__buffer = T.let(+'', String)
    end

    sig { params(value: String).returns(T.self_type) }
    def unsafe_text(value); end

    sig { returns(String) }
    def render; end

    private

    sig { returns(String) }
    def new_string; end

    sig do
      params(open: String, close: String, attr: T.nilable(Typewriter::Attribute), closing_char: String,
             block: T.nilable(T.proc.params(arg0: Typewriter::Writer).void)).returns(T.self_type)
    end
    def write(open, close, attr = nil, closing_char: CLOSE, &block); end

    sig { params(open: String, attr: T.nilable(Typewriter::Attribute)).void }
    def write_void(open, attr = nil); end
  end

  class Attribute
    extend T::Sig

    sig do
      params(buffer: T::Hash[String, T.untyped], block: T.nilable(T.proc.params(arg0: Typewriter::Attribute).void)).void
    end
    def initialize(buffer = {}, &block) # rubocop:disable Lint/UnusedMethodArgument
      @__buffer = buffer
    end

    sig { params(suffix: String, value: String).returns(Typewriter::Attribute) }
    def data(suffix, value); end

    sig { params(name: String, value: String).returns(Typewriter::Attribute) }
    def attribute(name, value); end

    sig { params(value: String).returns(Typewriter::Attribute) }
    def klass(value); end

    sig { params(attr: T.nilable(Typewriter::Attribute)).returns(String) }
    def self.to_html(attr); end

    sig { params(list: T::Hash[String, T::Boolean]).returns(Typewriter::Attribute) }
    def classes(list); end

    sig { params(list: T::Hash[String, T::Boolean]).returns(Typewriter::Attribute) }
    def klasses(list); end

    sig { params(other: Typewriter::Attribute).returns(Typewriter::Attribute) }
    def merge(other); end

    sig { returns(String) }
    def safe_attribute; end

    sig { params(name: String, value: T.untyped).returns(Typewriter::Attribute) }
    def write(name, value); end

    sig { params(name: String, print: T::Boolean).returns(Typewriter::Attribute) }
    def write_boolean(name, print); end

    include Typewriter::SpecAttributes
  end
end

module Typewriter
  # HTML nodes autogenerated, do not edit
  module SpecElements
    module HTMLHtmlElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def html(attributes = nil, &elements); end
    end

    module HTMLHeadElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def head(attributes = nil, &elements); end
    end

    module HTMLTitleElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def title(attributes = nil, &elements); end
    end

    module HTMLBaseElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def base(attributes = nil, &elements); end
    end

    module HTMLLinkElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def link(attributes = nil, &elements); end
    end

    module HTMLMetaElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def meta(attributes = nil, &elements); end
    end

    module HTMLStyleElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def style(attributes = nil, &elements); end
    end

    module HTMLBodyElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def body(attributes = nil, &elements); end
    end

    module HTMLElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def article(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def section(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def nav(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def aside(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def hgroup(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def header(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def footer(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def address(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def dt(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def dd(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def figure(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def figcaption(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def main(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def search(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def em(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def strong(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def small(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def s(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def cite(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def dfn(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def abbr(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def ruby(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def rt(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def rp(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def code(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def var(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def samp(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def kbd(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def sub(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def sup(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def i(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def b(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def u(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def mark(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def bdi(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def bdo(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def wbr(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def summary(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def noscript(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def acronym(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def noframes(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def menuitem(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def noembed(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def plaintext(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def rb(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def rtc(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def strike(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def basefont(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def big(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def center(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def nobr(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def tt(attributes = nil, &elements); end
    end

    module HTMLHeadingElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def h1(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def h2(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def h3(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def h4(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def h5(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def h6(attributes = nil, &elements); end
    end

    module HTMLParagraphElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def p(attributes = nil, &elements); end
    end

    module HTMLHRElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def hr(attributes = nil, &elements); end
    end

    module HTMLPreElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def pre(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def listing(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def xmp(attributes = nil, &elements); end
    end

    module HTMLQuoteElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def blockquote(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def q(attributes = nil, &elements); end
    end

    module HTMLOListElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def ol(attributes = nil, &elements); end
    end

    module HTMLUListElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def ul(attributes = nil, &elements); end
    end

    module HTMLMenuElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def menu(attributes = nil, &elements); end
    end

    module HTMLLIElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def li(attributes = nil, &elements); end
    end

    module HTMLDListElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def dl(attributes = nil, &elements); end
    end

    module HTMLDivElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def div(attributes = nil, &elements); end
    end

    module HTMLAnchorElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def a(attributes = nil, &elements); end
    end

    module HTMLDataElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def data(attributes = nil, &elements); end
    end

    module HTMLTimeElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def time(attributes = nil, &elements); end
    end

    module HTMLSpanElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def span(attributes = nil, &elements); end
    end

    module HTMLBRElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def br(attributes = nil, &elements); end
    end

    module HTMLModElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def ins(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def del(attributes = nil, &elements); end
    end

    module HTMLPictureElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def picture(attributes = nil, &elements); end
    end

    module HTMLSourceElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def source(attributes = nil, &elements); end
    end

    module HTMLImageElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def img(attributes = nil, &elements); end
    end

    module HTMLIFrameElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def iframe(attributes = nil, &elements); end
    end

    module HTMLEmbedElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def embed(attributes = nil, &elements); end
    end

    module HTMLObjectElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def object(attributes = nil, &elements); end
    end

    module HTMLVideoElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def video(attributes = nil, &elements); end
    end

    module HTMLAudioElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def audio(attributes = nil, &elements); end
    end

    module HTMLTrackElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def track(attributes = nil, &elements); end
    end

    module HTMLMapElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def map(attributes = nil, &elements); end
    end

    module HTMLAreaElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def area(attributes = nil, &elements); end
    end

    module HTMLTableElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def table(attributes = nil, &elements); end
    end

    module HTMLTableCaptionElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def caption(attributes = nil, &elements); end
    end

    module HTMLTableColElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def colgroup(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def col(attributes = nil, &elements); end
    end

    module HTMLTableSectionElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def tbody(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def thead(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def tfoot(attributes = nil, &elements); end
    end

    module HTMLTableRowElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def tr(attributes = nil, &elements); end
    end

    module HTMLTableCellElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def td(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def th(attributes = nil, &elements); end
    end

    module HTMLFormElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def form(attributes = nil, &elements); end
    end

    module HTMLLabelElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def label(attributes = nil, &elements); end
    end

    module HTMLInputElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def input(attributes = nil, &elements); end
    end

    module HTMLButtonElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def button(attributes = nil, &elements); end
    end

    module HTMLSelectElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def select(attributes = nil, &elements); end
    end

    module HTMLDataListElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def datalist(attributes = nil, &elements); end
    end

    module HTMLOptGroupElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def optgroup(attributes = nil, &elements); end
    end

    module HTMLOptionElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def option(attributes = nil, &elements); end
    end

    module HTMLTextAreaElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def textarea(attributes = nil, &elements); end
    end

    module HTMLOutputElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def output(attributes = nil, &elements); end
    end

    module HTMLProgressElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def progress(attributes = nil, &elements); end
    end

    module HTMLMeterElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def meter(attributes = nil, &elements); end
    end

    module HTMLFieldSetElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def fieldset(attributes = nil, &elements); end
    end

    module HTMLLegendElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def legend(attributes = nil, &elements); end
    end

    module HTMLDetailsElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def details(attributes = nil, &elements); end
    end

    module HTMLDialogElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def dialog(attributes = nil, &elements); end
    end

    module HTMLScriptElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def script(attributes = nil, &elements); end
    end

    module HTMLTemplateElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def template(attributes = nil, &elements); end
    end

    module HTMLSlotElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def slot(attributes = nil, &elements); end
    end

    module HTMLCanvasElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def canvas(attributes = nil, &elements); end
    end

    module HTMLUnknownElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def applet(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def bgsound(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def isindex(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def keygen(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def nextid(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def blink(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def multicol(attributes = nil, &elements); end

      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def spacer(attributes = nil, &elements); end
    end

    module HTMLDirectoryElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def dir(attributes = nil, &elements); end
    end

    module HTMLFrameElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def frame(attributes = nil, &elements); end
    end

    module HTMLFrameSetElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def frameset(attributes = nil, &elements); end
    end

    module HTMLParamElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def param(attributes = nil, &elements); end
    end

    module HTMLFontElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def font(attributes = nil, &elements); end
    end

    module HTMLMarqueeElement
      sig { params(attributes: T.nilable(Typewriter::Attribute), elements: T.nilable(T.proc.void)).returns(T.self_type) }
      def marquee(attributes = nil, &elements); end
    end

    module HTMLAllElements
      include HTMLHtmlElement
      include HTMLHeadElement
      include HTMLTitleElement
      include HTMLBaseElement
      include HTMLLinkElement
      include HTMLMetaElement
      include HTMLStyleElement
      include HTMLBodyElement
      include HTMLElement
      include HTMLHeadingElement
      include HTMLParagraphElement
      include HTMLHRElement
      include HTMLPreElement
      include HTMLQuoteElement
      include HTMLOListElement
      include HTMLUListElement
      include HTMLMenuElement
      include HTMLLIElement
      include HTMLDListElement
      include HTMLDivElement
      include HTMLAnchorElement
      include HTMLDataElement
      include HTMLTimeElement
      include HTMLSpanElement
      include HTMLBRElement
      include HTMLModElement
      include HTMLPictureElement
      include HTMLSourceElement
      include HTMLImageElement
      include HTMLIFrameElement
      include HTMLEmbedElement
      include HTMLObjectElement
      include HTMLVideoElement
      include HTMLAudioElement
      include HTMLTrackElement
      include HTMLMapElement
      include HTMLAreaElement
      include HTMLTableElement
      include HTMLTableCaptionElement
      include HTMLTableColElement
      include HTMLTableSectionElement
      include HTMLTableRowElement
      include HTMLTableCellElement
      include HTMLFormElement
      include HTMLLabelElement
      include HTMLInputElement
      include HTMLButtonElement
      include HTMLSelectElement
      include HTMLDataListElement
      include HTMLOptGroupElement
      include HTMLOptionElement
      include HTMLTextAreaElement
      include HTMLOutputElement
      include HTMLProgressElement
      include HTMLMeterElement
      include HTMLFieldSetElement
      include HTMLLegendElement
      include HTMLDetailsElement
      include HTMLDialogElement
      include HTMLScriptElement
      include HTMLTemplateElement
      include HTMLSlotElement
      include HTMLCanvasElement
      include HTMLUnknownElement
      include HTMLDirectoryElement
      include HTMLFrameElement
      include HTMLFrameSetElement
      include HTMLParamElement
      include HTMLFontElement
      include HTMLMarqueeElement
    end
  end
end

module Typewriter
  # HTML attributes autogenerated, do not edit
  module SpecAttributes
    sig { params(value: String).returns(Typewriter::Attribute) }
    def accept(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def accept_charset(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def accesskey(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def action(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def align(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def alt(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def async(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def autocomplete(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def autofocus(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def autoplay(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def bgcolor(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def border(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def charset(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def checked(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def cols(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def colspan(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def content(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def contenteditable(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def controls(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def coords(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def datetime(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def default(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def defer(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def dir(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def disabled(value); end
    sig { params(value: T.any(String, T::Boolean)).returns(Typewriter::Attribute) }
    def download(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def draggable(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def enctype(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def for(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def form(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def formaction(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def headers(value); end
    sig { params(value: T.any(Numeric, String)).returns(Typewriter::Attribute) }
    def height(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def hidden(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def high(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def href(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def hreflang(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def id(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def integrity(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def ismap(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def kind(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def label(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def lang(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def list(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def loop(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def low(value); end
    sig { params(value: T.any(Numeric, String)).returns(Typewriter::Attribute) }
    def max(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def maxlength(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def media(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def method(value); end
    sig { params(value: T.any(Numeric, String)).returns(Typewriter::Attribute) }
    def min(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def multiple(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def muted(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def name(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def novalidate(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def open(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def optimum(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def pattern(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def placeholder(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def poster(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def preload(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def readonly(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def rel(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def required(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def reversed(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def rows(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def rowspan(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def sandbox(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def span(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def scope(value); end
    sig { params(value: T::Boolean).returns(Typewriter::Attribute) }
    def selected(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def shape(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def size(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def sizes(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def spellcheck(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def src(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def srcdoc(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def srclang(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def srcset(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def start(value); end
    sig { params(value: T.any(Numeric, String)).returns(Typewriter::Attribute) }
    def step(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def style(value); end
    sig { params(value: Numeric).returns(Typewriter::Attribute) }
    def tabindex(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def target(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def title(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def translate(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def type(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def usemap(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def value(value); end
    sig { params(value: T.any(Numeric, String)).returns(Typewriter::Attribute) }
    def width(value); end
    sig { params(value: String).returns(Typewriter::Attribute) }
    def wrap(value); end
  end
end
